@page "/fetchproducts"
@using InventoryHub.shared.Models

<h3>Product List</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}
else if (products != null)
{
    <ul>
        @foreach (var product in products)
        {
            <li>@product.Name - $@product.Price</li>
        }
    </ul>
}
else
{
    <p>Loading...</p>
}

@code {
    private Product[]? products;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var httpClient = new HttpClient
            {
                BaseAddress = new Uri("http://localhost:5277"), // Replace with your API's base URL
                Timeout = TimeSpan.FromSeconds(10) // Set a timeout for the request
            };

            var response = await httpClient.GetAsync("/api/productlist");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                products = System.Text.Json.JsonSerializer.Deserialize<Product[]>(json, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            else
            {
                errorMessage = $"Failed to fetch products: {response.StatusCode} - {response.ReasonPhrase}";
                Console.WriteLine($"Error fetching products: {response.StatusCode} - {response.ReasonPhrase}");
            }
        }
        catch (TaskCanceledException)
        {
            errorMessage = "The request timed out. Please try again later.";
            Console.WriteLine("Request timed out.");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while fetching products: {ex.Message}";
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
    }


}